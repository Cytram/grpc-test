// Code generated by protoc-gen-go. DO NOT EDIT.
// source: processor.proto

package processor

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProcessImageRequest struct {
	Image                *Image   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessImageRequest) Reset()         { *m = ProcessImageRequest{} }
func (m *ProcessImageRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessImageRequest) ProtoMessage()    {}
func (*ProcessImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{0}
}

func (m *ProcessImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessImageRequest.Unmarshal(m, b)
}
func (m *ProcessImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessImageRequest.Marshal(b, m, deterministic)
}
func (m *ProcessImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessImageRequest.Merge(m, src)
}
func (m *ProcessImageRequest) XXX_Size() int {
	return xxx_messageInfo_ProcessImageRequest.Size(m)
}
func (m *ProcessImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessImageRequest proto.InternalMessageInfo

func (m *ProcessImageRequest) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

type ProcessImageReply struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessImageReply) Reset()         { *m = ProcessImageReply{} }
func (m *ProcessImageReply) String() string { return proto.CompactTextString(m) }
func (*ProcessImageReply) ProtoMessage()    {}
func (*ProcessImageReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{1}
}

func (m *ProcessImageReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessImageReply.Unmarshal(m, b)
}
func (m *ProcessImageReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessImageReply.Marshal(b, m, deterministic)
}
func (m *ProcessImageReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessImageReply.Merge(m, src)
}
func (m *ProcessImageReply) XXX_Size() int {
	return xxx_messageInfo_ProcessImageReply.Size(m)
}
func (m *ProcessImageReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessImageReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessImageReply proto.InternalMessageInfo

func (m *ProcessImageReply) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type Image struct {
	// Image content, represented as a stream of bytes.
	// Note: As with all `bytes` fields, protobuffers use a pure binary
	// representation, whereas JSON representations use base64.
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// If both content and source is present use content.
	Source               *ImageSource `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{2}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Image) GetSource() *ImageSource {
	if m != nil {
		return m.Source
	}
	return nil
}

type ImageSource struct {
	// The URI of the source document. Can be either:
	//
	// 1. A publicly-accessible image HTTP/HTTPS URL. When fetching images from
	HttpUri              string   `protobuf:"bytes,1,opt,name=http_uri,json=httpUri,proto3" json:"http_uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageSource) Reset()         { *m = ImageSource{} }
func (m *ImageSource) String() string { return proto.CompactTextString(m) }
func (*ImageSource) ProtoMessage()    {}
func (*ImageSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{3}
}

func (m *ImageSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageSource.Unmarshal(m, b)
}
func (m *ImageSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageSource.Marshal(b, m, deterministic)
}
func (m *ImageSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageSource.Merge(m, src)
}
func (m *ImageSource) XXX_Size() int {
	return xxx_messageInfo_ImageSource.Size(m)
}
func (m *ImageSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageSource.DiscardUnknown(m)
}

var xxx_messageInfo_ImageSource proto.InternalMessageInfo

func (m *ImageSource) GetHttpUri() string {
	if m != nil {
		return m.HttpUri
	}
	return ""
}

func init() {
	proto.RegisterType((*ProcessImageRequest)(nil), "processor.ProcessImageRequest")
	proto.RegisterType((*ProcessImageReply)(nil), "processor.ProcessImageReply")
	proto.RegisterType((*Image)(nil), "processor.Image")
	proto.RegisterType((*ImageSource)(nil), "processor.ImageSource")
}

func init() { proto.RegisterFile("processor.proto", fileDescriptor_6783724e039e1aa6) }

var fileDescriptor_6783724e039e1aa6 = []byte{
	// 206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x28, 0xca, 0x4f,
	0x4e, 0x2d, 0x2e, 0xce, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0xd9, 0x72, 0x09, 0x07, 0x40, 0x38, 0x9e, 0xb9, 0x89, 0xe9, 0xa9, 0x41, 0xa9, 0x85, 0xa5, 0xa9,
	0xc5, 0x25, 0x42, 0x6a, 0x5c, 0xac, 0x99, 0x20, 0xbe, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xb7, 0x91,
	0x80, 0x1e, 0xc2, 0x08, 0x88, 0x3a, 0x88, 0xb4, 0x92, 0x2e, 0x97, 0x20, 0xaa, 0xf6, 0x82, 0x9c,
	0x4a, 0x21, 0x09, 0x2e, 0xf6, 0xe4, 0xfc, 0xbc, 0x92, 0xd4, 0xbc, 0x12, 0xb0, 0x76, 0x9e, 0x20,
	0x18, 0x57, 0x29, 0x90, 0x8b, 0x15, 0xac, 0x0e, 0xb7, 0x12, 0x21, 0x3d, 0x2e, 0xb6, 0xe2, 0xfc,
	0xd2, 0xa2, 0xe4, 0x54, 0x09, 0x26, 0xb0, 0xd5, 0x62, 0xe8, 0x56, 0x07, 0x83, 0x65, 0x83, 0xa0,
	0xaa, 0x94, 0x34, 0xb8, 0xb8, 0x91, 0x84, 0x85, 0x24, 0xb9, 0x38, 0x32, 0x4a, 0x4a, 0x0a, 0xe2,
	0x4b, 0x8b, 0x32, 0xc1, 0x26, 0x73, 0x06, 0xb1, 0x83, 0xf8, 0xa1, 0x45, 0x99, 0x46, 0xd1, 0x5c,
	0x9c, 0x01, 0x30, 0xa3, 0x84, 0xfc, 0xb8, 0x78, 0x90, 0x1d, 0x2e, 0x24, 0x87, 0x64, 0x0d, 0x96,
	0x00, 0x91, 0x92, 0xc1, 0x29, 0x5f, 0x90, 0x53, 0xa9, 0xc4, 0x90, 0xc4, 0x06, 0x0e, 0x59, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x13, 0x90, 0x40, 0xa7, 0x6c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProcessorClient is the client API for Processor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProcessorClient interface {
	ProcessImage(ctx context.Context, in *ProcessImageRequest, opts ...grpc.CallOption) (*ProcessImageReply, error)
}

type processorClient struct {
	cc *grpc.ClientConn
}

func NewProcessorClient(cc *grpc.ClientConn) ProcessorClient {
	return &processorClient{cc}
}

func (c *processorClient) ProcessImage(ctx context.Context, in *ProcessImageRequest, opts ...grpc.CallOption) (*ProcessImageReply, error) {
	out := new(ProcessImageReply)
	err := c.cc.Invoke(ctx, "/processor.Processor/ProcessImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessorServer is the server API for Processor service.
type ProcessorServer interface {
	ProcessImage(context.Context, *ProcessImageRequest) (*ProcessImageReply, error)
}

// UnimplementedProcessorServer can be embedded to have forward compatible implementations.
type UnimplementedProcessorServer struct {
}

func (*UnimplementedProcessorServer) ProcessImage(ctx context.Context, req *ProcessImageRequest) (*ProcessImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessImage not implemented")
}

func RegisterProcessorServer(s *grpc.Server, srv ProcessorServer) {
	s.RegisterService(&_Processor_serviceDesc, srv)
}

func _Processor_ProcessImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServer).ProcessImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/processor.Processor/ProcessImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServer).ProcessImage(ctx, req.(*ProcessImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Processor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "processor.Processor",
	HandlerType: (*ProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessImage",
			Handler:    _Processor_ProcessImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "processor.proto",
}
